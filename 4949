#include <stdio.h>
#include <stdlib.h>

#define MAX_LEN 100 // 최대 입력 길이 정의

// 문자열이 균형잡힌 괄호를 포함하는지 판별하는 함수
int isBalanced(const char* str) {
    char* stack = (char*)malloc(MAX_LEN * sizeof(char)); // 괄호를 저장할 동적 배열(스택) 할당
    int top = -1; // 스택의 최상단 인덱스 초기화. 스택이 비어있음을 나타냄.

    for (int i = 0; str[i] != '.'; ++i) { // 문자열의 마지막까지 반복
        if (str[i] == '(' || str[i] == '[') { // 여는 괄호를 만난 경우
            top++; // 스택에 괄호를 push하기 전에 top 인덱스 증가
            stack[top] = str[i]; // 스택에 괄호 push
        }
        else if (str[i] == ')' || str[i] == ']') { // 닫는 괄호를 만난 경우
            if (top == -1) { // 스택이 비어있으면 균형이 맞지 않음
                free(stack); // 동적 할당된 메모리 해제
                return 0; // false 반환
            }

            char match = (str[i] == ')') ? '(' : '['; // 짝을 이루는 여는 괄호
            if (stack[top] != match) { // 스택의 top과 짝이 맞지 않는 경우
                free(stack); // 동적 할당된 메모리 해제
                return 0; // false 반환
            }
            top--; // 스택에서 pop (실제로 제거하지는 않고 인덱스만 조정)
        }
    }

    int result = (top == -1) ? 1 : 0; // 스택이 비어있으면 true, 그렇지 않으면 false
    free(stack); // 동적 할당된 메모리 해제
    return result;
}

int main() {
    char input[MAX_LEN + 1]; // 입력받을 문자열 배열 (+1은 널 종료 문자를 위함)

    while (1) {
        fgets(input, MAX_LEN, stdin); // 한 줄 입력 받기

        // 입력의 종료 조건 확인: 첫 문자가 '.'이고, 두 번째 문자가 개행('\n') 또는 널('\0')
        if (input[0] == '.' && (input[1] == '\n' || input[1] == '\0')) break;

        // 균형잡힌 괄호 문자열인지 판별하여 결과 출력
        if (isBalanced(input)) {
            printf("yes\n"); // 균형잡힌 경우
        }
        else {
            printf("no\n"); // 균형이 맞지 않는 경우
        }
    }

    return 0; // 프로그램 정상 종료
}
